# 工作流名称
name: openWrt-lede-raspberryPi

# 工作流触发时机, see: https://docs.github.com/zh/actions/using-workflows/triggering-a-workflow
# 触发条件修改为: 当 main 分支有 push 操作 || 每天 0 点
on:
  schedule:
    - cron: '30 22 * * *'
  push:
    branches: 
      - main

# 作业, see: https://docs.github.com/zh/actions/using-jobs/using-jobs-in-a-workflow
jobs:
  OpenWrt-RaspberryPi: 
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Space cleanup
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
            git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
            libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
            python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
            uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo apt-get clean
        
      - name: Clone lede
        run: |
          git clone https://github.com/coolsnowwolf/lede.git

      - name: Update feeds
        run: |
          cd lede
          ./scripts/feeds update -a
          ./scripts/feeds install -a
        
      - name: Generate config file
        run: |
          cd lede
          rm -f ./.config*
          touch ./.config

          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系, 例如:

          cat >> .config <<EOF

          # RaspberryPi 4B 配置
          CONFIG_TARGET_bcm27xx=y
          CONFIG_TARGET_bcm27xx_bcm2711=y
          CONFIG_TARGET_bcm27xx_bcm2711_DEVICE_rpi-4=y

          EOF

          # ===============================================================

          sed -i 's/^[ \t]*//g' ./.config # 删除文件中每行的所有前导空格
          make defconfig
    
      - name: Make download
        run: |
          cd lede
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          ls -a ./bin/targets
      
      # step 4. 创建 GitHub Release
      - name: Create release                # 步骤名
        id: create_release                  # 步骤 ID, 后面的步骤可使用该 ID 获取当前步骤输出内容
        uses: actions/create-release@master # 使用插件名 => https://github.com/actions/create-release
        env: # 环境变量设置
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 该 token 由 Actions 提供, 不需要自己创建(照着写就行)
        with: # 插件参数传递
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
 
      - name: Upload release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const release_id = '${{ needs.create_release.outputs.id }}';

            const upload = async (dir) => {
              const stat = fs.statSync(dir)

              if(stat.isDirectory()){
                // 文件夹
                const dirs = fs.readdirSync(dir)
                for (let dir of dirs) {
                  await upload(path.join(dir,value))
                }
              } else if (stat.isFile()) {
                // 文件 - 上传
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  name: file,
                  repo: context.repo.repo,
                  release_id: release_id,
                  owner: context.repo.owner,
                  data: await fs.readFileSync(`./${file}`)
                });
              }
            }

            upload('./lede/bin/targets')
